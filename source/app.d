import std.stdio : writeln;
import std.file : write;
import std.getopt;
import std.process;
import std.string : strip;
import std.format;
import semver;

enum GIT_DESCR_CMD = ["git", "describe", "--tags", "--always"];

enum FMT_STR = "// AUTOGENERATED BY GITVER, DO NOT MODIFY
module %s;

%s
enum %s_VERSION = \"%s\";

// trans rights";

enum VER_DOC_STR = "/**
	%s Version, autogenerated with gitver
*/";

void main(string[] args)
{
	bool printOut;
	string prefix = "V";
	string itchFile;
	string file = "source/ver_.d";
	string mod = "ver_";
	string appName = null;
	auto helpInformation = getopt(
		args,
		"prefix", "Prefix to prepend to the version enum", &prefix,
		"appname", "Name of app", &appName,
		"file", "The file to write to", &file,
		"itchfile", "The file (if any) to write itch.io version number to", &itchFile,
		"mod", "The name of the module", &mod,
		"pout", "Print out instead of writing to file", &printOut
	);

	if (helpInformation.helpWanted) {
		defaultGetoptPrinter(
			"Tool to generate ver_.d files from git tags",
			helpInformation.options
		);
	}

	auto result = execute(GIT_DESCR_CMD);
	string version_ = result.output.strip;

	// Error out
	// TODO: Take other Git languages in to account and check stderr instead
	if (version_[0..5] == "fatal") {
		writeln(version_);
		return;
	}

	// Prepend commmit+ to commit-only versions
	if (!SemVer(version_).isValid) {
		version_ = "commit+"~version_;
	}

	// PrintOut
	if (printOut) {
		writeln(version_);
		return;
	}

	// Write stuff out
	write(file, FMT_STR.format(
		mod,
		appName ? VER_DOC_STR.format(appName) : "",
		prefix,
		version_
	));

	// write stuff out for itch.io
	if (itchFile.length > 0) {
		write(itchFile, version_);
	}
}

unittest {
	assert(!SemVer("587d095").isValid, "Should be invalid!");
	assert(!SemVer("commit+587d095").isValid, "Should be invalid!");
	assert(SemVer("v0.1-1-g787c667").isValid, "Should be invalid!");
}